{"ast":null,"code":"var _jsxFileName = \"/Users/truongphat/Desktop/WebProgramming/midterm_web/frontend/src/routers/ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthService } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  adminOnly = false\n}) => {\n  _s();\n  const [authChecked, setAuthChecked] = useState(false);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  useEffect(() => {\n    // Small delay to ensure auth state is updated\n    setTimeout(() => {\n      const isLoggedIn = AuthService.isLoggedIn();\n      const isAdmin = AuthService.isAdmin();\n      setIsAuthorized(adminOnly ? isLoggedIn && isAdmin : isLoggedIn);\n      setAuthChecked(true);\n    }, 100);\n  }, [adminOnly]);\n\n  // Show loading or nothing while checking\n  if (!authChecked) return null;\n\n  // After checking, either redirect or show children\n  if (!isAuthorized) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: adminOnly ? \"/\" : \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n};\n_s(ProtectedRoute, \"mVZGVM1IYnq6uSNHDHUSEC28AKs=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","AuthService","jsxDEV","_jsxDEV","ProtectedRoute","children","adminOnly","_s","authChecked","setAuthChecked","isAuthorized","setIsAuthorized","setTimeout","isLoggedIn","isAdmin","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/truongphat/Desktop/WebProgramming/midterm_web/frontend/src/routers/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { AuthService } from \"../services/api\";\n\nconst ProtectedRoute = ({ children, adminOnly = false }) => {\n  const [authChecked, setAuthChecked] = useState(false);\n  const [isAuthorized, setIsAuthorized] = useState(false);\n  \n  useEffect(() => {\n    // Small delay to ensure auth state is updated\n    setTimeout(() => {\n      const isLoggedIn = AuthService.isLoggedIn();\n      const isAdmin = AuthService.isAdmin();\n      \n      setIsAuthorized(adminOnly ? (isLoggedIn && isAdmin) : isLoggedIn);\n      setAuthChecked(true);\n    }, 100);\n  }, [adminOnly]);\n  \n  // Show loading or nothing while checking\n  if (!authChecked) return null;\n  \n  // After checking, either redirect or show children\n  if (!isAuthorized) {\n    return <Navigate to={adminOnly ? \"/\" : \"/login\"} replace />;\n  }\n  \n  return children;\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd;IACAa,UAAU,CAAC,MAAM;MACf,MAAMC,UAAU,GAAGZ,WAAW,CAACY,UAAU,CAAC,CAAC;MAC3C,MAAMC,OAAO,GAAGb,WAAW,CAACa,OAAO,CAAC,CAAC;MAErCH,eAAe,CAACL,SAAS,GAAIO,UAAU,IAAIC,OAAO,GAAID,UAAU,CAAC;MACjEJ,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;;EAEf;EACA,IAAI,CAACE,WAAW,EAAE,OAAO,IAAI;;EAE7B;EACA,IAAI,CAACE,YAAY,EAAE;IACjB,oBAAOP,OAAA,CAACH,QAAQ;MAACe,EAAE,EAAET,SAAS,GAAG,GAAG,GAAG,QAAS;MAACU,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7D;EAEA,OAAOf,QAAQ;AACjB,CAAC;AAACE,EAAA,CAxBIH,cAAc;AAAAiB,EAAA,GAAdjB,cAAc;AA0BpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}