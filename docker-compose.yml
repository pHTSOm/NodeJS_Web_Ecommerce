version: '3.8'

services:
  # Nginx Gateway
  nginx:
    image: nginx:latest
    container_name: ecommerce-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user-service
      - product-service
      - frontend
    networks:
      - ecommerce-network

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: Ecommerce-Project-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: NodeJS_midterm_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - Ecommerce-Project-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5


  # User Service
  user-service:
    build: 
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    restart: always
    environment:
      DB_HOST: mysql
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: NodeJS_midterm_db
      JWT_SECRET: ${JWT_SECRET}
      SERVICE_PORT: 3001
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - ecommerce-network

  # Product Service
  product-service:
    build: 
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: Ecommerce-Project-product-service
    restart: always
    environment:
      - SERVICE_PORT=3002
      - JWT_SECRET=your_shared_jwt_secret
      - DB_HOST=mysql
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=NodeJS_midterm_db 
      - USER_SERVICE_URL=http://user-service:3001
    volumes:
      - ./services/product-service/public/uploads:/app/public/uploads
    depends_on:
      - mysql
      - user-service
    networks:
      - ecommerce-network

  # Backend Node.js API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: Ecommerce-Project-backend
    restart: always
    ports:
      - "5000:5000"  # Only for direct debugging access
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      DB_HOST: mysql
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: NodeJS_midterm_db
      JWT_SECRET: 96555b9b-4a7e-43e4-87c3-93a2f0548264
      NODE_ENV: production
      LOG_LEVEL: debug  # For better troubleshooting
    volumes:
      - ./backend:/app  # Use bind mount for easier development
      - ./backend/public/uploads:/app/public/uploads
    networks:
      - Ecommerce-Project-network
    deploy:
      replicas: 2

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: Ecommerce-Project-frontend
    restart: always
    environment:
      - REACT_APP_API_URL=/api  # Use relative URL for API calls
    networks:
      -Ecommerce-Project-network


networks:
 Ecommerce-Project-network:
    driver: bridge

volumes:
  mysql_data: