version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: Midterm-NodeJS-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: NodeJS_midterm_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - Midterm-NodeJS-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: Midterm-NodeJS-redis
    restart: always
    ports:
      - "6379:6379"  # Default Redis port
    networks:
      - Midterm-NodeJS-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js API
  backend_product:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: midterm-NodeJS-backend
    restart: always
    ports:
      - "5001:5001"  # Only for direct debugging access
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: mysql
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: NodeJS_midterm_db
      JWT_SECRET: 96555b9b-4a7e-43e4-87c3-93a2f0548264
      NODE_ENV: production
      REDIS_HOST: redis  
      REDIS_PORT: 6379
      LOG_LEVEL: debug  # For better troubleshooting
    volumes:
      - ./backend:/app  # Use bind mount for easier development
      - ./backend/public/uploads:/app/public/uploads
    networks:
      - Midterm-NodeJS-network
    # Remove replicas for easier debugging 
    # deploy:
    #   replicas: 3

  backend_auth:
    build: 
      context: ./authentication-service
      dockerfile: Dockerfile
    container_name: midterm-NodeJS-backend-authentication
    restart: always
    ports:
      - "5000:5000"  # Only for direct debugging access
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: mysql
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: NodeJS_midterm_db
      JWT_SECRET: 96555b9b-4a7e-43e4-87c3-93a2f0548264
      NODE_ENV: production
      REDIS_HOST: redis  
      REDIS_PORT: 6379
      LOG_LEVEL: debug  # For better troubleshooting
    volumes:
      - ./backend:/app  # Use bind mount for easier development
      - ./backend/public/uploads:/app/public/uploads
    networks:
      - Midterm-NodeJS-network
    # Remove replicas for easier debugging 
    # deploy:
    #   replicas: 3

  welcome-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: midterm-NodeJS-worker
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      LOG_LEVEL: debug
    command: ["node", "workers/welcomeWorker.js"]
    networks:
      - Midterm-NodeJS-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: midterm-Nodejs-frontend
    restart: always
    # No direct port exposure - will be accessed through nginx
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=/api  # Use relative URL for API calls
    networks:
      - Midterm-NodeJS-network

  # Nginx as the main entry point
  nginx:
    image: nginx:latest
    container_name: midterm-NodeJS-nginx
    ports:
      - "80:80"  # Main application port
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  
    depends_on:
      - backend
      - frontend
    networks:
      - Midterm-NodeJS-network

networks:
  Midterm-NodeJS-network:
    driver: bridge

volumes:
  mysql_data: